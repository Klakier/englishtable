'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.transform = transform;
var shuffle = require('./shuffle.js');

var splitArray = function splitArray(array, chunkSize) {
    var result = [];
    if (chunkSize === 0) {
        return result;
    }

    var i, j;
    for (i = 0, j = array.length; i < j; i += chunkSize) {
        result.push(array.slice(i, i + chunkSize));
    }

    return result;
};

var separate = function separate(array) {
    var result = {
        leftColumn: [],
        rightColumn: []
    };

    array.forEach(function (element) {
        result.leftColumn.push(element.left);
        result.rightColumn.push(element.right);
    });

    return result;
};

var mix = function mix(array) {
    var separated = separate(array);
    var result = [];

    var leftMixed = shuffle(separated.leftColumn);
    var rightMixed = shuffle(separated.rightColumn);
    for (var i = 0; i < leftMixed.length; i++) {
        result.push({
            left: leftMixed[i],
            right: rightMixed[i]
        });
    }

    return result;
};

function transform(dictionary, elementsPerPage) {
    if (!dictionary) {
        return [];
    }

    if (dictionary.length === 0) {
        return [];
    }
    var splited = splitArray(dictionary, elementsPerPage);
    var result = [];

    for (var i = 0; i < splited.length; i++) {
        result.push({
            index: i,
            elements: mix(splited[i])
        });
    }

    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlV0aWxzL2l0ZW1zVHJhbnNmb3JtYXRpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUE4Q2dCO0FBOUNoQixJQUFJLFVBQVUsUUFBUSxjQUFSLENBQVY7O0FBRUosSUFBSSxhQUFhLFNBQWIsVUFBYSxDQUFTLEtBQVQsRUFBZ0IsU0FBaEIsRUFBMkI7QUFDeEMsUUFBSSxTQUFTLEVBQVQsQ0FEb0M7QUFFeEMsUUFBSSxjQUFjLENBQWQsRUFBaUI7QUFDakIsZUFBTyxNQUFQLENBRGlCO0tBQXJCOztBQUlBLFFBQUksQ0FBSixFQUFPLENBQVAsQ0FOd0M7QUFPeEMsU0FBSyxJQUFJLENBQUosRUFBTyxJQUFJLE1BQU0sTUFBTixFQUFjLElBQUksQ0FBSixFQUFPLEtBQUssU0FBTCxFQUFnQjtBQUNqRCxlQUFPLElBQVAsQ0FBWSxNQUFNLEtBQU4sQ0FBWSxDQUFaLEVBQWUsSUFBSSxTQUFKLENBQTNCLEVBRGlEO0tBQXJEOztBQUlBLFdBQU8sTUFBUCxDQVh3QztDQUEzQjs7QUFjakIsSUFBSSxXQUFXLFNBQVgsUUFBVyxDQUFTLEtBQVQsRUFBZ0I7QUFDM0IsUUFBSSxTQUFTO0FBQ1Qsb0JBQVksRUFBWjtBQUNBLHFCQUFhLEVBQWI7S0FGQSxDQUR1Qjs7QUFNM0IsVUFBTSxPQUFOLENBQWMsVUFBUyxPQUFULEVBQWtCO0FBQzVCLGVBQU8sVUFBUCxDQUFrQixJQUFsQixDQUF1QixRQUFRLElBQVIsQ0FBdkIsQ0FENEI7QUFFNUIsZUFBTyxXQUFQLENBQW1CLElBQW5CLENBQXdCLFFBQVEsS0FBUixDQUF4QixDQUY0QjtLQUFsQixDQUFkLENBTjJCOztBQVczQixXQUFPLE1BQVAsQ0FYMkI7Q0FBaEI7O0FBY2YsSUFBSSxNQUFNLFNBQU4sR0FBTSxDQUFTLEtBQVQsRUFBZ0I7QUFDdEIsUUFBSSxZQUFZLFNBQVMsS0FBVCxDQUFaLENBRGtCO0FBRXRCLFFBQUksU0FBUyxFQUFULENBRmtCOztBQUl0QixRQUFJLFlBQVksUUFBUSxVQUFVLFVBQVYsQ0FBcEIsQ0FKa0I7QUFLdEIsUUFBSSxhQUFhLFFBQVEsVUFBVSxXQUFWLENBQXJCLENBTGtCO0FBTXRCLFNBQUssSUFBSSxJQUFJLENBQUosRUFBTyxJQUFJLFVBQVUsTUFBVixFQUFrQixHQUF0QyxFQUEyQztBQUN2QyxlQUFPLElBQVAsQ0FBWTtBQUNSLGtCQUFNLFVBQVUsQ0FBVixDQUFOO0FBQ0EsbUJBQU8sV0FBVyxDQUFYLENBQVA7U0FGSixFQUR1QztLQUEzQzs7QUFPQSxXQUFPLE1BQVAsQ0Fic0I7Q0FBaEI7O0FBZ0JILFNBQVMsU0FBVCxDQUFtQixVQUFuQixFQUErQixlQUEvQixFQUFnRDtBQUNuRCxRQUFJLENBQUMsVUFBRCxFQUFhO0FBQ2IsZUFBTyxFQUFQLENBRGE7S0FBakI7O0FBSUEsUUFBSSxXQUFXLE1BQVgsS0FBc0IsQ0FBdEIsRUFBeUI7QUFDekIsZUFBTyxFQUFQLENBRHlCO0tBQTdCO0FBR0EsUUFBSSxVQUFVLFdBQVcsVUFBWCxFQUF1QixlQUF2QixDQUFWLENBUitDO0FBU25ELFFBQUksU0FBUyxFQUFULENBVCtDOztBQVduRCxTQUFLLElBQUksSUFBSSxDQUFKLEVBQU8sSUFBSSxRQUFRLE1BQVIsRUFBZ0IsR0FBcEMsRUFBeUM7QUFDckMsZUFBTyxJQUFQLENBQVk7QUFDUixtQkFBTyxDQUFQO0FBQ0Esc0JBQVUsSUFBSSxRQUFRLENBQVIsQ0FBSixDQUFWO1NBRkosRUFEcUM7S0FBekM7O0FBT0EsV0FBTyxNQUFQLENBbEJtRDtDQUFoRCIsImZpbGUiOiJVdGlscy9pdGVtc1RyYW5zZm9ybWF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUuanMnKTtcblxudmFyIHNwbGl0QXJyYXkgPSBmdW5jdGlvbihhcnJheSwgY2h1bmtTaXplKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGlmIChjaHVua1NpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgaSwgajtcbiAgICBmb3IgKGkgPSAwLCBqID0gYXJyYXkubGVuZ3RoOyBpIDwgajsgaSArPSBjaHVua1NpemUpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goYXJyYXkuc2xpY2UoaSwgaSArIGNodW5rU2l6ZSkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgc2VwYXJhdGUgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGxlZnRDb2x1bW46IFtdLFxuICAgICAgICByaWdodENvbHVtbjogW11cbiAgICB9O1xuXG4gICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHJlc3VsdC5sZWZ0Q29sdW1uLnB1c2goZWxlbWVudC5sZWZ0KTtcbiAgICAgICAgcmVzdWx0LnJpZ2h0Q29sdW1uLnB1c2goZWxlbWVudC5yaWdodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIG1peCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHNlcGFyYXRlZCA9IHNlcGFyYXRlKGFycmF5KTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICB2YXIgbGVmdE1peGVkID0gc2h1ZmZsZShzZXBhcmF0ZWQubGVmdENvbHVtbik7XG4gICAgdmFyIHJpZ2h0TWl4ZWQgPSBzaHVmZmxlKHNlcGFyYXRlZC5yaWdodENvbHVtbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZWZ0TWl4ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgbGVmdDogbGVmdE1peGVkW2ldLFxuICAgICAgICAgICAgcmlnaHQ6IHJpZ2h0TWl4ZWRbaV1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm0oZGljdGlvbmFyeSwgZWxlbWVudHNQZXJQYWdlKSB7XG4gICAgaWYgKCFkaWN0aW9uYXJ5KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBpZiAoZGljdGlvbmFyeS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICB2YXIgc3BsaXRlZCA9IHNwbGl0QXJyYXkoZGljdGlvbmFyeSwgZWxlbWVudHNQZXJQYWdlKTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwbGl0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICBlbGVtZW50czogbWl4KHNwbGl0ZWRbaV0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59Il19